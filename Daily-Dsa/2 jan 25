import java.util.*;
 
public class Main {
    private static final long MAXN = 1000000;
    private static final long MOD = 1000000007;
    private static long[] spf = new long[(int) MAXN + 1]; // spf[i] will store the smallest prime factor of i
 
    // Compute SPF (Smallest Prime Factor) for numbers up to MAXN
    private static void computeSPF() {
        for (int i = 2; i <= MAXN; i++) {
            spf[i] = i; // Initialize spf for every number to itself
        }
 
        for (int i = 2; i * i <= MAXN; i++) {
            if (spf[i] == i) { // Check if i is prime
                for (int j = i * i; j <= MAXN; j += i) {
                    if (spf[j] == j) { // Update spf[j] to the smallest prime factor
                        spf[j] = i;
                    }
                }
            }
        }
    }
 
    // Factorize a number using the spf array
    private static Map<Long, Long> factorize(long value) {
        Map<Long, Long> factors = new HashMap<>();
        while (value != 1) {
            long divisor = spf[(int) value];
            factors.put(divisor, factors.getOrDefault(divisor, 0L) + 1);
            value /= divisor;
        }
        return factors;
    }
 
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
 
        // Read input
        int n = scanner.nextInt();
        int m = scanner.nextInt();
 
        computeSPF(); // Compute smallest prime factors for numbers up to MAXN
 
        Map<Long, Long> b1 = new HashMap<>();
        for (long i = 2; i <= m; i++) {
            Map<Long, Long> factors = factorize(i);
            for (Map.Entry<Long, Long> entry : factors.entrySet()) {
                b1.put(entry.getKey(), b1.getOrDefault(entry.getKey(), 0L) + entry.getValue());
            }
        }
 
        long[] b = new long[n + 1];
        for (int i = 1; i <= n; i++) {
            b[i] = scanner.nextLong();
 
            Map<Long, Long> b5 = new HashMap<>(b1);
            Map<Long, Long> factors = factorize(b[i]);
 
            for (Map.Entry<Long, Long> entry : factors.entrySet()) {
                b5.put(entry.getKey(), b5.getOrDefault(entry.getKey(), 0L) + entry.getValue());
            }
 
            long g = 1;
            for (Map.Entry<Long, Long> entry : b5.entrySet()) {
                g = (g * ((entry.getValue() % MOD + 1) % MOD)) % MOD;
            }
            System.out.print(g + " ");
        }
        scanner.close();
    }
}
 
