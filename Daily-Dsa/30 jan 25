import java.util.*;

public class Main {
    public static long mod = 1000000007;
    
    public static long power(long a, long b, long mod) {
        long res = 1;
        while (b > 0) {
            if (b % 2 == 1) {
                res = (res * a) % mod;
            }
            a = (a * a) % mod;
            b /= 2;
        }
        return res;
    }
    
    public static long CountValid(long[] A, long k, long d, long n) {
        long palindrom = 1;
        boolean valid = true;
        
        for (int i = 0; i < (n + 1) / 2; i++) {
            int j = (int) (n - i - 1);
            if (A[i] == 0 && A[j] == 0) {
                palindrom = (palindrom * k) % mod;
            } else if (A[i] == 0 || A[j] == 0) {
                palindrom = (palindrom * 1) % mod;
            } else if (A[i] != A[j]) {
                palindrom = 0;
                valid = false;
                break;
            }
        }
        
        long total = 1;
        for (long num : A) {
            if (num == 0) {
                total = (total * k) % mod;
            }
        }
        
        valid = true;
        long zero = 1;
        long dValue = 1;
        
        for (int i = 0; i < (n + 1) / 2; i++) {
            int j = (int) (n - i - 1);
            if (A[i] == 0 && A[j] == 0) {
                zero = (zero * k) % mod;
                if (i != j) {
                    zero = (zero * k) % mod;
                }
            } else if (A[i] == 0 || A[j] == 0) {
                dValue = (dValue * k) % mod;
            } else if (A[i] != A[j]) {
                valid = false;
            }
        }
        
        if (!valid) {
            return 0;
        } else {
            long palindrome = palindrom;
            long nonPlaindromType2 = ((dValue - 1 + mod) % mod * zero) % mod;
            long nonPalindromeType1 = (total - palindrome + mod) % mod;
            int x2 = (int) ((nonPalindromeType1 - nonPlaindromType2 + mod) % mod);
            long x = (x2 * power(2, mod - 2, mod)) % mod;
            long ans = (palindrome + x - nonPlaindromType2 + mod) % mod;
            return ans;
        }
    }
    
    public static void main(String[] args) {
        long[] A = new long[]{0, 3, 0, 4, 1, 5};
        long k = 2;
        long d = 2;
        long n = A.length;
       
        long result = CountValid(A, k, d, n);
        System.out.println("Result: " + result);
    }
}
