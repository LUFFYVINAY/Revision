import java.util.*;

public class Main {
  
    public static final int mod = 1000000007;
    public static long[] fact, inverseFact;

    public static long power(long x, long y) {
        long result = 1;
        while (y > 0) {
            if (y % 2 == 1) {
                result = (result * x) % mod;
            }
            x = (x * x) % mod;
            y /= 2;
        }
        return result;
    }

    public static void precomputeFactorial(int n) {
        fact = new long[n + 1];
        inverseFact = new long[n + 1];

        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = (fact[i - 1] * i) % mod;
        }

        inverseFact[n] = power(fact[n], mod - 2); // fermats therom
        for (int i = n - 1; i >= 0; i--) {
            inverseFact[i] = (inverseFact[i + 1] * (i + 1)) % mod;
        }
    }

    public static long combinations(int n, int r) {
        if (r > n || n < 0 || r < 0) {
            return 0;
        }
        return (fact[n] * inverseFact[r] % mod) * inverseFact[n - r] % mod;
    }

    public static void main(String[] args) {
        System.out.println("Hello, World!");
        int n = 15;
        int r = 3;
        precomputeFactorial(n);
        long ans = combinations(n, r);
        System.out.println(ans);
    }
}
