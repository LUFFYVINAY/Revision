problem 1 : Factor of a number 

import java.util.ArrayList;
import java.util.Collections;

public class Main {

    // Function to find and return divisors of n
    public static ArrayList<Long> printDivisors(long n) {
        ArrayList<Long> divisors = new ArrayList<>();
        
        for (long i = 1; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                if (n / i == i) {
                    divisors.add(i); // Only one occurrence if both are the same
                } else {
                    divisors.add(i); // Add the smaller divisor
                    divisors.add(n / i); // Add the larger divisor
                }
            }
        }
        
        return divisors;
    }

    public static void main(String[] args) {
        long n = 12; // Example number
        ArrayList<Long> divisors = printDivisors(n);
        
        // Sorting in descending order
        Collections.sort(divisors, Collections.reverseOrder());
        
        // Printing divisors
        for (long divisor : divisors) {
            System.out.print(divisor + " ");
        }
    }
}



problem 2 : Prime factorization of a number - 
import java.util.HashMap;
import java.util.Map;

public class Main {

    // Function to compute prime factors and their counts
    public static HashMap<Long, Long> primeFactors(long n) {
        HashMap<Long, Long> factorCount = new HashMap<>();

        // Count the number of 2s that divide n
        while (n % 2 == 0) {
            factorCount.put(2L, factorCount.getOrDefault(2L, 0L) + 1);
            n /= 2;
        }

        // n must be odd at this point
        for (long i = 3; i <= Math.sqrt(n); i += 2) {
            // While i divides n, increment its count
            while (n % i == 0) {
                factorCount.put(i, factorCount.getOrDefault(i, 0L) + 1);
                n /= i;
            }
        }

        // If n is a prime number greater than 2
        if (n > 2) {
            factorCount.put(n, factorCount.getOrDefault(n, 0L) + 1);
        }

        return factorCount;
    }

    public static void main(String[] args) {
        long n = 18; // Example number
        HashMap<Long, Long> factors = primeFactors(n);

        // Print each prime factor and its count
        for (Map.Entry<Long, Long> entry : factors.entrySet()) {
            System.out.println(entry.getKey() + " " + entry.getValue());
        }
    }
}




probelm 3 : Sieve of Eratosthenes. To generate all prime numbers from 1 to N. 

import java.util.ArrayList;
import java.util.List;

public class Main {

    // Function to find all prime numbers up to n using the Sieve of Eratosthenes
    public static List<Integer> sieve(int n) {
        boolean[] prime = new boolean[n + 1];
        for (int i = 0; i <= n; i++) {
            prime[i] = true;
        }
        prime[0] = false;
        prime[1] = false;

        int limit = (int) Math.sqrt(n);
        for (int p = 2; p <= limit; p++) {
            if (prime[p]) {
                for (int i = p * p; i <= n; i += p) {
                    prime[i] = false;
                }
            }
        }

        List<Integer> primes = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            if (prime[i]) {
                primes.add(i);
            }
        }
        return primes;
    }

    // Function to find primes in a range [start, end] using a segmented sieve
    public static List<Integer> sieveRange(int start, int end) {
        List<Integer> primes = sieve(end);
        List<Integer> rangePrimes = new ArrayList<>();

        for (int prime : primes) {
            if (prime >= start) {
                rangePrimes.add(prime);
            }
        }

        return rangePrimes;
    }

    public static void main(String[] args) {
        int l = 1; // Start of range
        int r = 100; // End of range
        List<Integer> primesInRange = sieveRange(l, r);

        // Print all prime numbers in the range
        for (int prime : primesInRange) {
            System.out.println(prime);
        }
    }
}


problem 4 : Smallest prime factor of any number from all [1â€¦.10^6] 

import java.util.Arrays;

public class SmallestPrimeFactor {
    static final int MAXN = 1000000;
    static int[] spf = new int[MAXN + 1]; // spf[i] will store the smallest prime factor of i

    // Function to compute the smallest prime factors for all numbers up to MAXN
    static void computeSPF() {
        // Initialize spf for every number to itself
        for (int i = 2; i <= MAXN; i++) {
            spf[i] = i;
        }

        // Start the sieve process
        for (int i = 2; i * i <= MAXN; i++) {
            if (spf[i] == i) { // Check if i is prime
                for (int j = i * i; j <= MAXN; j += i) {
                    if (spf[j] == j) { // Update spf[j] to the smallest prime factor
                        spf[j] = i;
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        // Compute SPF for all numbers from 2 to MAXN
        computeSPF();

        // Example: Print the smallest prime factor for the first 20 numbers
        for (int i = 2; i <= 20; i++) {
            System.out.println("Smallest prime factor of " + i + " is " + spf[i]);
        }
    }
}


probelm 5 : Prime factorization of all numbers in array


import java.util.*;

public class Main {
    
    static final int MAXN = 1000000;
    static int[] spf = new int[MAXN + 1];  // spf[i] will store the smallest prime factor of i

    // Function to compute the smallest prime factor (SPF) for all numbers up to MAXN
    public static void computeSPF() {
        // Initialize spf for every number to itself
        for (int i = 2; i <= MAXN; i++) {
            spf[i] = i;
        }

        // Start the sieve process
        for (int i = 2; i * i <= MAXN; i++) {
            if (spf[i] == i) {  // Check if i is prime
                for (int j = i * i; j <= MAXN; j += i) {
                    if (spf[j] == j) {  // Update spf[j] to the smallest prime factor
                        spf[j] = i;
                    }
                }
            }
        }
    }

    // Function to return the prime factorization of a number using its smallest prime factor
    public static Map<Integer, Integer> primeFactorization(int vl) {
        Map<Integer, Integer> factors = new HashMap<>();
        while (vl != 1) {
            int d = spf[vl];  // Get the smallest prime factor
            factors.put(d, factors.getOrDefault(d, 0) + 1);
            vl = vl / d;  // Divide by the smallest prime factor
        }
        return factors;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Compute SPF for all numbers from 2 to MAXN
        computeSPF();

        // Read input
        int n = sc.nextInt();
        int[] b = new int[n + 1];
        
        for (int i = 1; i <= n; i++) {
            b[i] = sc.nextInt();
            
            // Get the prime factorization for b[i]
            Map<Integer, Integer> factors = primeFactorization(b[i]);
            
            System.out.println("For index i -> " + i);
            // Print the prime factorization
            for (Map.Entry<Integer, Integer> entry : factors.entrySet()) {
                System.out.println(entry.getKey() + " " + entry.getValue());
            }
            System.out.println();
        }

        sc.close();
    }
}

