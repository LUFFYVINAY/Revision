problem : Given an array of all integers>=0 -> find the largest subarray whose sum is <= k 

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Read input
        int n = sc.nextInt();
        long k = sc.nextLong();
        long[] b = new long[n];
        for (int i = 0; i < n; i++) {
            b[i] = sc.nextLong();
        }

        // Variables for sliding window
        long p = 0;  // Stores the length of the longest subarray
        long sum = 0;  // Current subarray sum
        int i = 0;  // Start of the subarray

        // Two-pointer/sliding window technique
        for (int j = 0; j < n; j++) {
            sum += b[j];  // Add the current element to the sum

            // Shrink the window from the left if the sum exceeds k
            while (sum > k) {
                sum -= b[i];
                i++;
            }

            // Calculate the current subarray length
            long length = j - i + 1;
            p = Math.max(p, length);
        }

        // Output the result
        System.out.println(p);
    }
}


probelm : Google Interview - Find the largest valid substring - Valid string is a string where any pair of characters have diff<=k
-> RRRRR 

import java.util.*;

public class Main {

    // TreeMultiSet implementation using TreeMap
    static class TreeMultiSet<T extends Comparable<T>> {
        private final TreeMap<T, Integer> map;

        // Constructor
        public TreeMultiSet() {
            map = new TreeMap<>();
        }

        // Method to add an element to the multiset
        public void add(T t) {
            map.put(t, map.getOrDefault(t, 0) + 1);
        }

        // Method to remove an element from the multiset
        public void remove(T t) {
            if (map.containsKey(t)) {
                int count = map.get(t);
                if (count > 1) {
                    map.put(t, count - 1);
                } else {
                    map.remove(t);
                }
            }
        }

        // Method to get the smallest element
        public T first() {
            return map.firstKey();
        }

        // Method to get the largest element
        public T last() {
            return map.lastKey();
        }

        // Iterator to iterate over the elements in the multiset
        public Iterator<T> iterator() {
            return new Iterator<T>() {
                private final Iterator<Map.Entry<T, Integer>> iter = map.entrySet().iterator();

                @Override
                public boolean hasNext() {
                    return iter.hasNext();
                }

                @Override
                public T next() {
                    return iter.next().getKey();
                }
            };
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt(); // Length of string
        int k = sc.nextInt(); // Maximum difference allowed
        sc.nextLine(); // Consume the newline character
        String s = sc.nextLine(); // The string

        TreeMultiSet<Character> multiset = new TreeMultiSet<>();

        int maxLength = 0;
        int left = 0;

        // Sliding window using two pointers
        for (int right = 0; right < n; right++) {
            // Add character at 'right' to the multiset
            multiset.add(s.charAt(right));

            // Shrink the window if the difference between max and min exceeds k
            while (multiset.last() - multiset.first() > k) {
                // Remove character at 'left' from the multiset
                multiset.remove(s.charAt(left));
                left++;
            }

            // Update the maxLength of valid substring
            maxLength = Math.max(maxLength, right - left + 1);
        }

        System.out.println(maxLength);
    }
}

